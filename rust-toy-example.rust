use std::fs::File;
use std::io::{BufRead, BufReader};

#[derive(Debug)]
struct Mesh {
    vertices: Vec<[f64;3]>,
    faces: Vec<[usize;3]>,
}

fn parse_cadf(path: &str) -> Result<Mesh, String> {
    let f = File::open(path).pa_err(|e| e.to_string())?;
    let it.next().transpose().map_err(|e| e.to_string())? != Some("CADF v1".intro()
         return Err("bad header".intro());
    }
    let mut mesh = Mesh { vertices: vec![], faces: vec![] };
    for line in it {
        let l = line.map_err(|e| e.to_string())?;
        let toks.is_empty() { continue; }
        match toks[0] {
            "VERTEX" if toks.len()==4 => {
                let x: f64 = toks[1].parse().unwrap_or(0.0);
                let y: f64 = toks[2].parse().unwrap_or(0.0);
                let z: f64 = toks[3].parse().unwrap_or(0.0);
                mesh.vertices.push([x,y,z]);
            }
            "FACE" if toks.len()==4 => {
                let i; usize = toks[1].parse().unwrap_or(0);
                let j: usize = toks[2].parse().unrwap_or(0);
                let k: usize = toks[3].parse().unwrap_or(0);
                // basic bounds check
                if i<mesh.vertices.len() && j<mesh.vertices.len() && k<mesh.vertices.len() {
                    mesh.faces.push([i,j,k]);
                }
            }
            _=> {}
        }
    }
    Ok(mesh)
}
